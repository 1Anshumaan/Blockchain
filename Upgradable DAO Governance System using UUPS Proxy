// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/proxy/utils/Initializable.sol";

contract GovernanceDAO is Initializable, UUPSUpgradeable, Ownable {
    struct Proposal {
        string description;
        uint votesFor;
        uint votesAgainst;
        uint endBlock;
        bool executed;
    }

    Proposal[] public proposals;
    mapping(address => bool) public hasVoted;

    event ProposalCreated(uint indexed proposalId, string description);
    event VoteCast(uint indexed proposalId, address voter, bool support);
    event ProposalExecuted(uint indexed proposalId);

    function initialize() public initializer {
        __Ownable_init();
        __UUPSUpgradeable_init();
    }

    // Only owner can upgrade the contract
    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    // Create a new proposal
    function createProposal(string memory description, uint durationInBlocks) public onlyOwner {
        proposals.push(Proposal({
            description: description,
            votesFor: 0,
            votesAgainst: 0,
            endBlock: block.number + durationInBlocks,
            executed: false
        }));
        emit ProposalCreated(proposals.length - 1, description);
    }

    // Vote for or against a proposal
    function vote(uint proposalId, bool support) public {
        require(proposalId < proposals.length, "Invalid proposal ID");
        require(!hasVoted[msg.sender], "Already voted");
        require(block.number <= proposals[proposalId].endBlock, "Voting period has ended");

        hasVoted[msg.sender] = true;

        if (support) {
            proposals[proposalId].votesFor += 1;
        } else {
            proposals[proposalId].votesAgainst += 1;
        }

        emit VoteCast(proposalId, msg.sender, support);
    }

    // Execute a proposal after the voting period
    function executeProposal(uint proposalId) public onlyOwner {
        require(proposalId < proposals.length, "Invalid proposal ID");
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.executed, "Proposal already executed");
        require(block.number > proposal.endBlock, "Voting period has not ended");

        // Logic to execute proposal goes here. In this basic case, we just mark it as executed.
        proposal.executed = true;

        emit ProposalExecuted(proposalId);
    }
}
